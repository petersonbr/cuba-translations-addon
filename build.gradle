
buildscript {
    ext.cubaVersion = '7.1.0'
    ext.bprocVersion = '1.0'
    ext.idpVersion = '0.2'
    ext.dashboardVersion = '3.1'
    repositories {
        maven {
            url 'https://dl.bintray.com/cuba-platform/main'
            
        }
        jcenter()

        
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        // Bintray upload plugin
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

def modulePrefix = 'cuba-translations-addon'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'br.com.petersonbr.translations'
        version = '7.1.3'
        isSnapshot = false
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def hsql = 'org.hsqldb:hsqldb:2.4.1'

configure([globalModule, coreModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies { 
            testCompile('junit:junit:4.12') 
        }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    } 
}


configure(globalModule) {
    dependencies {
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
    }

    entitiesEnhancing {
        main {
            enabled = true
        }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(hsql)
        testRuntime(hsql)
    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}-core")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost:9010'
        dbName = 'translations-9nw7UqGtW'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost:9010'
        dbName = 'translations-9nw7UqGtW'
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(globalModule)
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "br/com/petersonbr/translations/**"
        into "$cuba.tomcat.dir/conf/${modulePrefix}"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task updateSubmodules(type:Exec) {
    group 'Build Setup'
    description 'Updates (and inits) git submodules'
    def command = "git submodule update --init && cd translations && git checkout master && git pull"
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', "$command"
    } else {
        commandLine 'sh', '-c', "$command"
    }
}

task cleanTranslations(type: Delete) {
    delete("modules/core/src/com")
    delete("modules/global/src/com")
    delete("modules/web/src/com")
}

task copyTranslations(type:Copy) {
    from '/translations/content'
    into '/modules'
    includeEmptyDirs = false
    def availableTranslations = [:]
    eachFile { FileCopyDetails fcd ->
        def splitArray = fcd.path.split('/')
        def lang = splitArray[0]
        def project = splitArray[1]
        def version = splitArray[2]
        def module = splitArray[4]
        def filename = splitArray[splitArray.length-1];

        // remove english and russian translations already included in cuba
        if (['en', 'ru'].contains(lang)) {
            //println "Excluding file '$fcd.path' -> 'en' and 'ru' translations already exists in cuba"
            fcd.exclude();
            return
        }

        // Filter platform version
        if (['cuba', 'bpm', 'reports', 'charts', 'fts'].contains(project) && !"$cubaVersion".contains(version)) {
            //println "Excluding file '$fcd.path' -> Different platform version"
            fcd.exclude();
            return
        }

        // Don't copy english translations inside other languages folders
        if ("messages.properties".equals(filename) && !'en'.equals(lang)) {
            //println "Excluding file '$fcd.path' -> Don't copy english translations inside other languages folders"
            fcd.exclude();
            return
        }

        // Filter Bproc version
        if ('bproc'.equals(project) && !version.startsWith("$bprocVersion")) {
            //println "Excluding file '$fcd.path' -> Different Bproc version"
            fcd.exclude();
            return
        }

        // Filter Idp version
        if ('idp'.equals(project) && !version.startsWith("$idpVersion")) {
            //println "Excluding file '$fcd.path' -> Different Idp version"
            fcd.exclude();
            return
        }

        // Filter dashboard version
        if ('dashboard'.equals(project) && !version.startsWith("$dashboardVersion")) {
            //println "Excluding file '$fcd.path' -> Different dashboard version"
            fcd.exclude();
            return
        }

        // ignore file if there is no correspondent english translation file
        def engSplitArray = splitArray.clone()
        engSplitArray[0] = 'en'
        engSplitArray[engSplitArray.length-1] = 'messages.properties';
        def engFile = file('/translations/content/' + engSplitArray.join('/'))
        if (!engFile.exists()) {
            println "Excluding file '$fcd.path' -> there is no equivalent english file"
            fcd.exclude();
            return
        }

        else {
            def oldPath = fcd.path

            // Correctly set translation path
            fcd.path = fcd.path.replace("$lang/$project/$version/modules/$module", "$module")
            //println "Copying file '$filename' from '$oldPath' -> '$fcd.path'"

            availableTranslations.put("$lang-$project-$module", true)
        }
    }
    doLast {
        println 'Available translations:'
        def entries = availableTranslations.entrySet()
        entries.each { entry ->
            println "$entry.key"
        }
    }
}
copyTranslations.dependsOn updateSubmodules
copyTranslations.dependsOn cleanTranslations

task install
install.dependsOn copyTranslations

subprojects {
    apply plugin: 'com.jfrog.bintray'

    bintrayUpload.dependsOn copyTranslations

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_API_KEY')

        configurations = ['archives']

        publish = true

        override = false

        // metadata
        pkg {
            repo = 'cuba-components'
            name = 'cuba-translations-addon'
            desc = 'CUBA addon with all available community translations'

            websiteUrl = 'https://github.com/petersonbr/cuba-translations-addon'
            issueTrackerUrl = 'https://github.com/petersonbr/cuba-translations-addon/issues'
            vcsUrl = 'https://github.com/petersonbr/cuba-translations-addon.git' // mandatory for Open Source projects

            licenses = ["Apache-2.0"]

            labels = ['cuba', 'cuba-platform', 'cuba-component', 'translation', 'localization']
            githubRepo = 'petersonbr/cuba-translations-addon'
            //githubReleaseNotesFile = 'CHANGELOG.md' // optional Github readme file

            version {
                name = "${cuba.artifact.version}"
                desc = ''
                released = new Date()
                vcsTag = "${cuba.artifact.version}"
            }
        }
    }
}
